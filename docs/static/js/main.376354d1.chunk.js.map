{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAkB5C,OACI,0BAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC7CN,EAAc,OAOd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,YCNlBG,EAAc,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAGpC,OACI,yBAAKC,UAAU,0CACX,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCRHK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbN,EADa,0FAC4EO,UAAUF,GADtF,sBAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAMe,EAAIf,MACVC,IAAG,UAACc,EAAIC,cAAL,aAAC,EAAYC,iBAAiBhB,QATtB,kBAaZY,GAbY,4CAAH,sDCIPK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECAX,SAACA,GAAc,IAAD,EACZrB,mBAAS,CAC/B2B,KAAM,GACNO,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAkBtC,OAZCC,qBAAU,WACPjB,EAAQC,GACHiB,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAS,CACLT,KAAKY,EACLL,SAAQ,MAEb,UAEZ,CAACb,IAEGc,EDjBwBM,CAAapB,GAAhCU,EADuB,EAC5BJ,KAAaO,EADe,EACfA,QAEpB,OACI,oCACI,wBAAIjB,UAAU,qCAAqCI,GAEnDa,GAAW,uBAAGjB,UAAU,oCAAb,WAEX,yBAAKA,UAAU,aACNc,EAAOF,KAAI,SAACC,GAAD,OACR,kBAAC,EAAD,eACIY,IAAOZ,EAAIhB,IACPgB,UEbnBa,EAAe,WAAO,IAAD,EACM3C,mBAAS,CAAC,cADhB,mBACvBQ,EADuB,KACXT,EADW,KAQ9B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAEQS,EAAWqB,KAAI,SAAAR,GAAQ,OACnB,kBAAC,EAAD,CACIqB,IAAKrB,EACLA,SAAUA,UClBtCuB,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.376354d1.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2) {\n            setCategories( categories => [inputValue, ...categories]);\n            setInputValue('');\n        }\n\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </ form>\n    ) \n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n    // console.log(id, title, url);\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","export const getGifs = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=mU5lZPtyvyyuuNpm64NZOlWJXfsYNob7&q=${encodeURI(category)}&limit=20`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title:img.title,\n            url:img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ({category}) => {\n    const {data:images, loading} = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n           {loading && <p className=\"animate__animated animate__flash\">Loading</p>} \n\n            <div className=\"card-grid\">\n                    {images.map((img) => (\n                        <GifGridItem \n                            key = {img.id}\n                            {...img}\n                        />\n                        ))}\n            </div>\n        </>\n    )\n}\n","import {useState, useEffect} from 'react'\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n     useEffect(() => {\n        getGifs(category)\n            .then(imgs => {\n                setTimeout(() => {\n                    setState({\n                        data:imgs,\n                        loading:false\n                    });\n                }, 3000);\n            })\n    }, [category])\n\n    return state;\n}\n","import React, {useState} from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n    const [categories, setCategories] = useState(['One Punch']);\n\n    // const handleAdd = (e) => {\n    //     // setCategories(['HunterXHunter', ...categories]);\n    //     setCategories(cats => ['HunterXHunter', ...categories]); \n    // }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr />\n\n            <ol>\n                {\n                    categories.map(category => (\n                        <GifGrid \n                            key={category}\n                            category={category} />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);"],"sourceRoot":""}